#!/usr/bin/env python3
"""
Zantara Bridge v4.1.0 - Gmail API Automation
Enhanced Features - Stream C Implementation
Automated compliance email templates and sending
"""

import os
import json
import logging
import base64
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import pickle
from pathlib import Path
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import mimetypes

# Google Gmail API
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# Template engine
from jinja2 import Environment, BaseLoader, Template
import markdown

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ZantaraGmailAutomation:
    """Gmail API automation for compliance email templates"""
    
    SCOPES = [
        'https://www.googleapis.com/auth/gmail.send',
        'https://www.googleapis.com/auth/gmail.readonly',
        'https://www.googleapis.com/auth/gmail.modify'
    ]
    
    def __init__(self, credentials_file: str = 'gmail_credentials.json', token_file: str = 'gmail_token.pickle'):
        self.credentials_file = credentials_file
        self.token_file = token_file
        self.service = None
        
        # Email templates
        self.email_templates = self._load_email_templates()
        
        # Template engine
        self.jinja_env = Environment(loader=BaseLoader())
        
        # Initialize service
        self._authenticate()
        
        logger.info("Gmail Automation initialized")
    
    def _authenticate(self) -> None:
        """Authenticate with Gmail API"""
        
        creds = None
        
        # Load existing token
        if os.path.exists(self.token_file):
            with open(self.token_file, 'rb') as token:
                creds = pickle.load(token)
        
        # If no valid credentials, request authorization
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                try:
                    creds.refresh(Request())
                except Exception as e:
                    logger.warning(f"Token refresh failed: {e}")
                    creds = None
            
            if not creds:
                if not os.path.exists(self.credentials_file):
                    logger.warning(f"Gmail credentials file not found: {self.credentials_file}")
                    logger.info("Gmail automation will work in template-only mode")
                    return
                
                flow = InstalledAppFlow.from_client_secrets_file(
                    self.credentials_file, self.SCOPES
                )
                creds = flow.run_local_server(port=0)
            
            # Save credentials for next run
            with open(self.token_file, 'wb') as token:
                pickle.dump(creds, token)
        
        try:\n            self.service = build('gmail', 'v1', credentials=creds)\n            logger.info(\"Gmail API authenticated successfully\")\n        except Exception as e:\n            logger.error(f\"Failed to build Gmail service: {e}\")\n    \n    def _load_email_templates(self) -> Dict[str, Dict[str, str]]:\n        \"\"\"Load predefined email templates\"\"\"\n        \n        templates = {\n            'visa_reminder': {\n                'subject': 'Visa Application Deadline Reminder - {{country}} {{visa_type}}',\n                'text_template': '''\nDear {{recipient_name}},\n\nThis is a friendly reminder that your {{visa_type}} application for {{country}} has an upcoming deadline.\n\nDeadline: {{deadline_date}}\nDays Remaining: {{days_remaining}}\nApplication Reference: {{reference_number}}\n\nRequired Actions:\n{% for action in required_actions %}\n- {{action}}\n{% endfor %}\n\nPlease ensure all documents are submitted before the deadline to avoid delays or rejection.\n\nIf you need assistance, please contact our compliance team.\n\nBest regards,\nZantara Bridge Compliance Team\n''',\n                'html_template': '''\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .header { background-color: #1a73e8; color: white; padding: 20px; text-align: center; }\n        .content { padding: 20px; }\n        .deadline { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; margin: 15px 0; border-radius: 5px; }\n        .urgent { background-color: #f8d7da; border-color: #f5c6cb; }\n        .actions { background-color: #f8f9fa; padding: 15px; margin: 15px 0; border-radius: 5px; }\n        .footer { color: #666; font-size: 0.9em; margin-top: 30px; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h2>Visa Application Deadline Reminder</h2>\n    </div>\n    <div class=\"content\">\n        <p>Dear {{recipient_name}},</p>\n        \n        <p>This is a friendly reminder that your <strong>{{visa_type}}</strong> application for <strong>{{country}}</strong> has an upcoming deadline.</p>\n        \n        <div class=\"deadline {% if days_remaining <= 7 %}urgent{% endif %}\">\n            <h3>Deadline Information</h3>\n            <ul>\n                <li><strong>Deadline:</strong> {{deadline_date}}</li>\n                <li><strong>Days Remaining:</strong> {{days_remaining}}</li>\n                <li><strong>Application Reference:</strong> {{reference_number}}</li>\n            </ul>\n        </div>\n        \n        <div class=\"actions\">\n            <h3>Required Actions</h3>\n            <ul>\n            {% for action in required_actions %}\n                <li>{{action}}</li>\n            {% endfor %}\n            </ul>\n        </div>\n        \n        <p><strong>Important:</strong> Please ensure all documents are submitted before the deadline to avoid delays or rejection.</p>\n        \n        <p>If you need assistance, please contact our compliance team.</p>\n        \n        <div class=\"footer\">\n            <p>Best regards,<br>\n            Zantara Bridge Compliance Team<br>\n            Generated automatically by Zantara Bridge v4.1.0</p>\n        </div>\n    </div>\n</body>\n</html>\n'''\n            },\n            \n            'tax_deadline_notice': {\n                'subject': 'Tax Filing Deadline Notice - {{tax_type}} {{jurisdiction}}',\n                'text_template': '''\nDear {{recipient_name}},\n\nThis notice is to inform you of an upcoming tax filing deadline:\n\nTax Type: {{tax_type}}\nJurisdiction: {{jurisdiction}}\nDeadline: {{deadline_date}}\nTax Year: {{tax_year}}\nEstimated Amount: {{estimated_amount}}\n\nRequired Documents:\n{% for document in required_documents %}\n- {{document}}\n{% endfor %}\n\nPenalties for late filing may apply. Please ensure timely submission.\n\nFor questions, contact our tax compliance specialists.\n\nRegards,\nZantara Bridge Tax Compliance Division\n''',\n                'html_template': '''\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .header { background-color: #34a853; color: white; padding: 20px; text-align: center; }\n        .content { padding: 20px; }\n        .tax-info { background-color: #e8f5e8; border: 1px solid #c3e6c3; padding: 15px; margin: 15px 0; border-radius: 5px; }\n        .warning { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; margin: 15px 0; border-radius: 5px; }\n        .documents { background-color: #f8f9fa; padding: 15px; margin: 15px 0; border-radius: 5px; }\n        .footer { color: #666; font-size: 0.9em; margin-top: 30px; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h2>Tax Filing Deadline Notice</h2>\n    </div>\n    <div class=\"content\">\n        <p>Dear {{recipient_name}},</p>\n        \n        <p>This notice is to inform you of an upcoming tax filing deadline:</p>\n        \n        <div class=\"tax-info\">\n            <h3>Tax Information</h3>\n            <ul>\n                <li><strong>Tax Type:</strong> {{tax_type}}</li>\n                <li><strong>Jurisdiction:</strong> {{jurisdiction}}</li>\n                <li><strong>Deadline:</strong> {{deadline_date}}</li>\n                <li><strong>Tax Year:</strong> {{tax_year}}</li>\n                <li><strong>Estimated Amount:</strong> {{estimated_amount}}</li>\n            </ul>\n        </div>\n        \n        <div class=\"documents\">\n            <h3>Required Documents</h3>\n            <ul>\n            {% for document in required_documents %}\n                <li>{{document}}</li>\n            {% endfor %}\n            </ul>\n        </div>\n        \n        <div class=\"warning\">\n            <strong>⚠️ Important:</strong> Penalties for late filing may apply. Please ensure timely submission.\n        </div>\n        \n        <p>For questions, contact our tax compliance specialists.</p>\n        \n        <div class=\"footer\">\n            <p>Regards,<br>\n            Zantara Bridge Tax Compliance Division<br>\n            Generated automatically by Zantara Bridge v4.1.0</p>\n        </div>\n    </div>\n</body>\n</html>\n'''\n            },\n            \n            'document_analysis_report': {\n                'subject': 'Document Analysis Report - {{report_title}}',\n                'text_template': '''\nDear {{recipient_name}},\n\nPlease find attached the document analysis report for your recent submission.\n\nReport Summary:\n- Documents Analyzed: {{document_count}}\n- Analysis Date: {{analysis_date}}\n- Report ID: {{report_id}}\n\nKey Findings:\n{% for finding in key_findings %}\n- {{finding}}\n{% endfor %}\n\n{% if recommendations %}\nRecommendations:\n{% for recommendation in recommendations %}\n- {{recommendation}}\n{% endfor %}\n{% endif %}\n\nThe detailed report is attached as a PDF file.\n\nIf you have any questions about the analysis, please don't hesitate to contact us.\n\nBest regards,\nZantara Bridge Analysis Team\n''',\n                'html_template': '''\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .header { background-color: #ff6d01; color: white; padding: 20px; text-align: center; }\n        .content { padding: 20px; }\n        .summary { background-color: #f0f8ff; border: 1px solid #b6d7ff; padding: 15px; margin: 15px 0; border-radius: 5px; }\n        .findings { background-color: #f8f9fa; padding: 15px; margin: 15px 0; border-radius: 5px; }\n        .recommendations { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; margin: 15px 0; border-radius: 5px; }\n        .footer { color: #666; font-size: 0.9em; margin-top: 30px; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h2>Document Analysis Report</h2>\n    </div>\n    <div class=\"content\">\n        <p>Dear {{recipient_name}},</p>\n        \n        <p>Please find attached the document analysis report for your recent submission.</p>\n        \n        <div class=\"summary\">\n            <h3>Report Summary</h3>\n            <ul>\n                <li><strong>Documents Analyzed:</strong> {{document_count}}</li>\n                <li><strong>Analysis Date:</strong> {{analysis_date}}</li>\n                <li><strong>Report ID:</strong> {{report_id}}</li>\n            </ul>\n        </div>\n        \n        <div class=\"findings\">\n            <h3>Key Findings</h3>\n            <ul>\n            {% for finding in key_findings %}\n                <li>{{finding}}</li>\n            {% endfor %}\n            </ul>\n        </div>\n        \n        {% if recommendations %}\n        <div class=\"recommendations\">\n            <h3>Recommendations</h3>\n            <ul>\n            {% for recommendation in recommendations %}\n                <li>{{recommendation}}</li>\n            {% endfor %}\n            </ul>\n        </div>\n        {% endif %}\n        \n        <p><strong>📎 The detailed report is attached as a PDF file.</strong></p>\n        \n        <p>If you have any questions about the analysis, please don't hesitate to contact us.</p>\n        \n        <div class=\"footer\">\n            <p>Best regards,<br>\n            Zantara Bridge Analysis Team<br>\n            Generated automatically by Zantara Bridge v4.1.0</p>\n        </div>\n    </div>\n</body>\n</html>\n'''\n            },\n            \n            'compliance_update': {\n                'subject': 'Compliance Update - {{update_type}}',\n                'text_template': '''\nDear {{recipient_name}},\n\nWe are writing to inform you of important compliance updates:\n\nUpdate Type: {{update_type}}\nEffective Date: {{effective_date}}\nSeverity: {{severity}}\n\nChanges:\n{% for change in changes %}\n- {{change}}\n{% endfor %}\n\nAction Required:\n{% for action in required_actions %}\n- {{action}}\n{% endfor %}\n\nDeadline for Compliance: {{compliance_deadline}}\n\nFailure to comply may result in penalties or legal issues.\n\nFor assistance with compliance implementation, please contact our team.\n\nRegards,\nZantara Bridge Compliance Team\n''',\n                'html_template': '''\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .header { background-color: #6f42c1; color: white; padding: 20px; text-align: center; }\n        .content { padding: 20px; }\n        .update-info { background-color: #f8f9fa; border: 1px solid #dee2e6; padding: 15px; margin: 15px 0; border-radius: 5px; }\n        .changes { background-color: #e7f3ff; border: 1px solid #b6d7ff; padding: 15px; margin: 15px 0; border-radius: 5px; }\n        .actions { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; margin: 15px 0; border-radius: 5px; }\n        .warning { background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 10px; margin: 15px 0; border-radius: 5px; }\n        .footer { color: #666; font-size: 0.9em; margin-top: 30px; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h2>Compliance Update Notice</h2>\n    </div>\n    <div class=\"content\">\n        <p>Dear {{recipient_name}},</p>\n        \n        <p>We are writing to inform you of important compliance updates:</p>\n        \n        <div class=\"update-info\">\n            <h3>Update Information</h3>\n            <ul>\n                <li><strong>Update Type:</strong> {{update_type}}</li>\n                <li><strong>Effective Date:</strong> {{effective_date}}</li>\n                <li><strong>Severity:</strong> {{severity}}</li>\n            </ul>\n        </div>\n        \n        <div class=\"changes\">\n            <h3>Changes</h3>\n            <ul>\n            {% for change in changes %}\n                <li>{{change}}</li>\n            {% endfor %}\n            </ul>\n        </div>\n        \n        <div class=\"actions\">\n            <h3>Action Required</h3>\n            <ul>\n            {% for action in required_actions %}\n                <li>{{action}}</li>\n            {% endfor %}\n            </ul>\n            <p><strong>Deadline for Compliance:</strong> {{compliance_deadline}}</p>\n        </div>\n        \n        <div class=\"warning\">\n            <strong>⚠️ Important:</strong> Failure to comply may result in penalties or legal issues.\n        </div>\n        \n        <p>For assistance with compliance implementation, please contact our team.</p>\n        \n        <div class=\"footer\">\n            <p>Regards,<br>\n            Zantara Bridge Compliance Team<br>\n            Generated automatically by Zantara Bridge v4.1.0</p>\n        </div>\n    </div>\n</body>\n</html>\n'''\n            }\n        }\n        \n        return templates\n    \n    def render_email_template(self, template_name: str, variables: Dict[str, Any]) -> Dict[str, str]:\n        \"\"\"Render an email template with provided variables\"\"\"\n        \n        if template_name not in self.email_templates:\n            raise ValueError(f\"Template '{template_name}' not found\")\n        \n        template_data = self.email_templates[template_name]\n        \n        # Render subject\n        subject_template = Template(template_data['subject'])\n        subject = subject_template.render(**variables)\n        \n        # Render text content\n        text_template = Template(template_data['text_template'])\n        text_content = text_template.render(**variables)\n        \n        # Render HTML content\n        html_template = Template(template_data['html_template'])\n        html_content = html_template.render(**variables)\n        \n        return {\n            'subject': subject,\n            'text_content': text_content,\n            'html_content': html_content\n        }\n    \n    def create_email_message(self, \n                           to_email: str,\n                           subject: str,\n                           text_content: str,\n                           html_content: str = None,\n                           from_email: str = None,\n                           attachments: List[str] = None) -> Dict[str, Any]:\n        \"\"\"Create an email message object\"\"\"\n        \n        msg = MIMEMultipart('alternative')\n        msg['To'] = to_email\n        msg['Subject'] = subject\n        \n        if from_email:\n            msg['From'] = from_email\n        \n        # Add text content\n        text_part = MIMEText(text_content, 'plain')\n        msg.attach(text_part)\n        \n        # Add HTML content if provided\n        if html_content:\n            html_part = MIMEText(html_content, 'html')\n            msg.attach(html_part)\n        \n        # Add attachments if provided\n        if attachments:\n            for file_path in attachments:\n                if os.path.exists(file_path):\n                    self._add_attachment(msg, file_path)\n                else:\n                    logger.warning(f\"Attachment not found: {file_path}\")\n        \n        # Convert to Gmail API format\n        raw_message = base64.urlsafe_b64encode(msg.as_bytes()).decode('utf-8')\n        \n        return {\n            'raw': raw_message,\n            'message_object': msg\n        }\n    \n    def _add_attachment(self, msg: MIMEMultipart, file_path: str) -> None:\n        \"\"\"Add an attachment to the email message\"\"\"\n        \n        # Guess content type\n        content_type, encoding = mimetypes.guess_type(file_path)\n        \n        if content_type is None or encoding is not None:\n            content_type = 'application/octet-stream'\n        \n        main_type, sub_type = content_type.split('/', 1)\n        \n        with open(file_path, 'rb') as fp:\n            attachment = MIMEBase(main_type, sub_type)\n            attachment.set_payload(fp.read())\n        \n        encoders.encode_base64(attachment)\n        \n        filename = os.path.basename(file_path)\n        attachment.add_header(\n            'Content-Disposition',\n            f'attachment; filename=\"{filename}\"'\n        )\n        \n        msg.attach(attachment)\n    \n    def send_email(self, email_message: Dict[str, Any]) -> Optional[str]:\n        \"\"\"Send an email using Gmail API\"\"\"\n        \n        if not self.service:\n            logger.error(\"Gmail service not initialized\")\n            return None\n        \n        try:\n            sent_message = self.service.users().messages().send(\n                userId='me',\n                body=email_message\n            ).execute()\n            \n            message_id = sent_message['id']\n            logger.info(f\"Email sent successfully: {message_id}\")\n            return message_id\n            \n        except HttpError as e:\n            logger.error(f\"Error sending email: {e}\")\n            return None\n    \n    def send_template_email(self, \n                          template_name: str,\n                          to_email: str,\n                          variables: Dict[str, Any],\n                          from_email: str = None,\n                          attachments: List[str] = None) -> Optional[str]:\n        \"\"\"Send an email using a predefined template\"\"\"\n        \n        try:\n            # Render template\n            rendered = self.render_email_template(template_name, variables)\n            \n            # Create message\n            email_message = self.create_email_message(\n                to_email=to_email,\n                subject=rendered['subject'],\n                text_content=rendered['text_content'],\n                html_content=rendered['html_content'],\n                from_email=from_email,\n                attachments=attachments\n            )\n            \n            # Send email\n            return self.send_email(email_message)\n            \n        except Exception as e:\n            logger.error(f\"Error sending template email: {e}\")\n            return None\n    \n    def send_visa_reminder(self, \n                         recipient_email: str,\n                         recipient_name: str,\n                         country: str,\n                         visa_type: str,\n                         deadline_date: str,\n                         days_remaining: int,\n                         reference_number: str,\n                         required_actions: List[str]) -> Optional[str]:\n        \"\"\"Send a visa deadline reminder email\"\"\"\n        \n        variables = {\n            'recipient_name': recipient_name,\n            'country': country,\n            'visa_type': visa_type,\n            'deadline_date': deadline_date,\n            'days_remaining': days_remaining,\n            'reference_number': reference_number,\n            'required_actions': required_actions\n        }\n        \n        return self.send_template_email(\n            template_name='visa_reminder',\n            to_email=recipient_email,\n            variables=variables\n        )\n    \n    def send_tax_deadline_notice(self,\n                               recipient_email: str,\n                               recipient_name: str,\n                               tax_type: str,\n                               jurisdiction: str,\n                               deadline_date: str,\n                               tax_year: str,\n                               estimated_amount: str,\n                               required_documents: List[str]) -> Optional[str]:\n        \"\"\"Send a tax deadline notice email\"\"\"\n        \n        variables = {\n            'recipient_name': recipient_name,\n            'tax_type': tax_type,\n            'jurisdiction': jurisdiction,\n            'deadline_date': deadline_date,\n            'tax_year': tax_year,\n            'estimated_amount': estimated_amount,\n            'required_documents': required_documents\n        }\n        \n        return self.send_template_email(\n            template_name='tax_deadline_notice',\n            to_email=recipient_email,\n            variables=variables\n        )\n    \n    def send_document_analysis_report(self,\n                                    recipient_email: str,\n                                    recipient_name: str,\n                                    report_title: str,\n                                    document_count: int,\n                                    analysis_date: str,\n                                    report_id: str,\n                                    key_findings: List[str],\n                                    recommendations: List[str],\n                                    report_pdf_path: str = None) -> Optional[str]:\n        \"\"\"Send a document analysis report email\"\"\"\n        \n        variables = {\n            'recipient_name': recipient_name,\n            'report_title': report_title,\n            'document_count': document_count,\n            'analysis_date': analysis_date,\n            'report_id': report_id,\n            'key_findings': key_findings,\n            'recommendations': recommendations\n        }\n        \n        attachments = [report_pdf_path] if report_pdf_path else None\n        \n        return self.send_template_email(\n            template_name='document_analysis_report',\n            to_email=recipient_email,\n            variables=variables,\n            attachments=attachments\n        )\n    \n    def send_compliance_update(self,\n                             recipient_email: str,\n                             recipient_name: str,\n                             update_type: str,\n                             effective_date: str,\n                             severity: str,\n                             changes: List[str],\n                             required_actions: List[str],\n                             compliance_deadline: str) -> Optional[str]:\n        \"\"\"Send a compliance update email\"\"\"\n        \n        variables = {\n            'recipient_name': recipient_name,\n            'update_type': update_type,\n            'effective_date': effective_date,\n            'severity': severity,\n            'changes': changes,\n            'required_actions': required_actions,\n            'compliance_deadline': compliance_deadline\n        }\n        \n        return self.send_template_email(\n            template_name='compliance_update',\n            to_email=recipient_email,\n            variables=variables\n        )\n    \n    def preview_template(self, template_name: str, variables: Dict[str, Any]) -> Dict[str, str]:\n        \"\"\"Preview a template without sending\"\"\"\n        \n        try:\n            rendered = self.render_email_template(template_name, variables)\n            \n            # Add preview metadata\n            rendered['template_name'] = template_name\n            rendered['preview_timestamp'] = datetime.utcnow().isoformat()\n            rendered['variables_used'] = variables\n            \n            return rendered\n            \n        except Exception as e:\n            logger.error(f\"Error previewing template: {e}\")\n            return {'error': str(e)}\n    \n    def get_email_templates(self) -> List[str]:\n        \"\"\"Get list of available email templates\"\"\"\n        return list(self.email_templates.keys())\n    \n    def validate_template_variables(self, template_name: str, variables: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Validate that all required variables are provided for a template\"\"\"\n        \n        if template_name not in self.email_templates:\n            return {'valid': False, 'error': f\"Template '{template_name}' not found\"}\n        \n        template_data = self.email_templates[template_name]\n        \n        # Extract variables from templates using basic regex\n        import re\n        \n        all_template_text = (\n            template_data['subject'] + ' ' +\n            template_data['text_template'] + ' ' +\n            template_data['html_template']\n        )\n        \n        # Find all {{variable}} patterns\n        required_vars = set(re.findall(r'\\{\\{\\s*(\\w+)\\s*\\}\\}', all_template_text))\n        \n        # Check for missing variables\n        provided_vars = set(variables.keys())\n        missing_vars = required_vars - provided_vars\n        extra_vars = provided_vars - required_vars\n        \n        validation_result = {\n            'valid': len(missing_vars) == 0,\n            'required_variables': list(required_vars),\n            'provided_variables': list(provided_vars),\n            'missing_variables': list(missing_vars),\n            'extra_variables': list(extra_vars)\n        }\n        \n        if missing_vars:\n            validation_result['error'] = f\"Missing required variables: {', '.join(missing_vars)}\"\n        \n        return validation_result\n\ndef main():\n    \"\"\"Main function for testing Gmail automation\"\"\"\n    \n    logger.info(\"Testing Zantara Gmail Automation\")\n    \n    try:\n        gmail = ZantaraGmailAutomation()\n        \n        # Test template preview\n        sample_variables = {\n            'recipient_name': 'John Doe',\n            'country': 'Italy',\n            'visa_type': 'Tourist Visa',\n            'deadline_date': 'March 15, 2025',\n            'days_remaining': 14,\n            'reference_number': 'IT-TV-2025-001',\n            'required_actions': [\n                'Submit passport copy',\n                'Provide bank statements',\n                'Complete online application form'\n            ]\n        }\n        \n        # Preview visa reminder template\n        preview = gmail.preview_template('visa_reminder', sample_variables)\n        logger.info(\"Visa Reminder Preview:\")\n        logger.info(f\"Subject: {preview.get('subject', 'N/A')}\")\n        logger.info(f\"Content Length: {len(preview.get('text_content', ''))} chars\")\n        \n        # Test template validation\n        validation = gmail.validate_template_variables('visa_reminder', sample_variables)\n        logger.info(f\"Template validation: {validation}\")\n        \n        # List available templates\n        templates = gmail.get_email_templates()\n        logger.info(f\"Available templates: {templates}\")\n        \n        # Test document analysis report variables\n        doc_analysis_vars = {\n            'recipient_name': 'Jane Smith',\n            'report_title': 'Contract Analysis Report',\n            'document_count': 3,\n            'analysis_date': 'January 21, 2025',\n            'report_id': 'RPT-2025-001',\n            'key_findings': [\n                'All documents are properly formatted',\n                'Minor discrepancies found in dates',\n                'Compliance requirements met'\n            ],\n            'recommendations': [\n                'Standardize date formats',\n                'Review signature requirements',\n                'Update document templates'\n            ]\n        }\n        \n        doc_preview = gmail.preview_template('document_analysis_report', doc_analysis_vars)\n        logger.info(\"Document Analysis Report Preview:\")\n        logger.info(f\"Subject: {doc_preview.get('subject', 'N/A')}\")\n        \n        return gmail\n        \n    except Exception as e:\n        logger.error(f\"Error in main: {e}\")\n        \n        # Return mock for testing\n        logger.info(\"Gmail automation initialized in template-only mode\")\n        return None\n\nif __name__ == \"__main__\":\n    main()"